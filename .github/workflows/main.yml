name: Terraform and Deploy Medusa

on:
  push:
    branches:
      - main  # Trigger on push to the main branch 
  workflow_dispatch:  # Allow manual trigger
permissions:
 contents: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Use your Terraform version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Your specified region

      - name: Terraform Init
        run: |
          cd Terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd Terraform
          terraform plan

      - name: Terraform Apply
      
        run: |
         cd Terraform
         terraform apply -auto-approve
        
      # Step 4: Capture Terraform Outputs
      - name: Capture Terraform Outputs
        id: tf_output
        working-directory: Terraform
        run: terraform output -raw ec2_instance_public_ip > output.txt

      - name: Extract EC2 Public IP using grep
        working-directory: Terraform
        run: |
         echo "Checking contents of output.txt:"
         cat output.txt  # Debugging: Check the contents of output.txt
         EC2_IP=$(grep -oP '^\d+\.\d+\.\d+\.\d+' output.txt | xargs)  # Use grep to find the IP address
         echo "Extracted IP: $EC2_IP"
         echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV  # Append to GitHub Actions environment
         
      - name: Wait for EC2 to be ready
        run: sleep 60  # Wait for the EC2 instance to boot up

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: SSH into EC2 and deploy Medusa
        env:
          EC2_IP: ${{ env.EC2_IP }}
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # Use the secret directly i
          
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o "StrictHostKeyChecking=no" -i private_key.pem ubuntu@${EC2_IP} << 'EOF'
            # Retry logic for apt commands
          MAX_TRIES=5
          for i in $(seq 1 $MAX_TRIES); do
          if sudo apt-get update; then
          break
          else
          echo "Waiting for apt to become available..."
          sleep 10
          fi
          done
             # Update system and install necessary dependencies
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y git
          sudo apt install -y nodejs npm git postgresql redis-server
          sudo systemctl enable postgresql
          sudo systemctl start postgresql
          sudo systemctl enable redis-server

          # Set up PostgreSQL for Medusa-backend
          sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD 'sathish';" || true
          sudo -u postgres psql -c "CREATE DATABASE medusa_db;" || true
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusa_db TO medusa_user;" || true

           # Grant additional permissions to the user
          sudo -u postgres psql -d medusa_db -c "GRANT ALL PRIVILEGES ON SCHEMA public TO medusa_user;"

          # Configure PostgreSQL authentication method
          sudo sh -c 'echo "host all all 0.0.0.0/0 md5" >> /etc/postgresql/16/main/pg_hba.conf'

           # Reload PostgreSQL to apply configuration changes
          sudo systemctl reload postgresql


          # Install Medusa CLI
          sudo npm install -g @medusajs/medusa-cli

          # Create a new Medusa project
          mkdir medusa-backend && cd medusa-backend
          sudo medusa new . --skip-db

          # Update the .env file to connect to the correct PostgreSQL database
          echo "DATABASE_URL=postgres://medusa_user:sathish@localhost:5432/medusa_db" | sudo tee .env
          # Add Redis URL to the .env file
          echo "REDIS_URL=redis://localhost:6379" | sudo tee -a .env
          sudo chown $USER:$USER .env && chmod 644 .env
          
          # run migrations
          sudo medusa migrations run
          # set admin user-name and password 
          sudo medusa user --email sathishyadavdiploma@gmail.com --password sathish

          # Start Medusa backend
          nohup sudo medusa start &> medusa.log &
          EOF
